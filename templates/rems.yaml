---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  labels:
    app: {{ .Values.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.name }}
  template:
    metadata:
      name: {{ .Values.name }}
      labels:
        app: {{ .Values.name }}
    spec:
      initContainers:
      {{- if .Values.database.wait }}
      - name: database-wait
        image: bitnami/postgresql:16.2.0-debian-11-r1
        command:
        - /bin/sh
        - -c
        - |
          until timeout 1 psql -v ON_ERROR_STOP=1 \
                               -h rems-postgresql \
                               -U {{ .Values.postgresql.auth.username }} \
                               -d {{ .Values.postgresql.auth.database }} \
                               -c "SELECT 1" -w 1> /dev/null
          do
            echo "Waiting for database to accept connections"
            sleep 2
          done
          echo "Database connection found"
        env:
        - name: PGPASSWORD
          value: {{ .Values.postgresql.auth.password | quote }}
      {{- end }}
      {{- if .Values.migrate }}
      - name: database-migrate
        image: {{ .Values.image.name }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: COMMANDS
          value: "migrate"
        - name: CMD
          value: "migrate"
        volumeMounts:
        - name: init-config
          mountPath: /rems/config
      {{- end }}
      {{- if .Values.database.addData }}
      - name: database-add-data
        image: {{ .Values.image.name }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: COMMANDS
          value: {{ .Values.database.addDataType }}
        - name: CMD
          value: {{ .Values.database.addDataType }}
        volumeMounts:
        - name: init-config
          mountPath: /rems/config
      {{- end }}
      {{- if .Values.extraCommands }}
      - name: extra-commands
        image: {{ .Values.image.name }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: CMD
          value: {{ .Values.extraCommands }}
        volumeMounts:
        - name: init-config
          mountPath: /rems/config
      {{- end }}
      containers:
      - name: {{ .Values.name }}
        image: {{ .Values.image.name }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if not (.Values.run) }}
        command: ["sh", "-c", "exit 0"]
        {{- end }}
        ports:
        - containerPort: {{ .Values.port }}
          name: rems
        volumeMounts:
        - name: config
          mountPath: /rems/config
        {{- $img := .Files.Glob "files/img/*" }}
        {{- $trans := .Files.Glob "files/extra-translations/*" }}
        {{- $keys := .Files.Glob "files/keys/*" }}
        {{- $db_tls := .Files.Glob "files/db-tls/*" }}
        {{- if .Values.theme.create }}
        - name: theme
          mountPath: /rems/theme
          {{- if $img }}
        - name: img
          mountPath: /rems/theme/public/img
          {{- end }}
          {{- if $trans }}
        - name: extra-translations
          mountPath: /rems/theme/extra-translations
          {{- end }}
        {{- end }}
        {{- if .Values.extrapages.create }}
        - name: extra-pages
          mountPath: /rems/extra-pages
        {{- end }}
        {{- if .Values.certs.create }}
        - name: certs
          mountPath: /rems/certs
        {{- end }}
        {{- if $keys }}
        - name: keys
          mountPath: /rems/keys
        {{- end }}
        {{- if $db_tls }}
          {{- if .Values.postgres.tls.enabled }}
        - name: db-tls
          mountPath: /rems/db-tls
          {{- end }}
        {{- end }}
        {{- if .Values.readOnlyFilesystem }}
        - name: tmp
          mountPath: /tmp
        {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ .Values.name }}-config
      - name: init-config
        configMap:
          name: {{ .Values.name }}-init-config
      {{- if .Values.theme.create }}
      - name: theme
        configMap:
          name:  {{ .Values.name }}-theme
        {{- if $img }}
      - name: img
        configMap:
          name: {{ .Values.name }}-img
        {{- end }}
        {{- if $trans  }}
      - name: extra-translations
        configMap:
          name: {{ .Values.name }}-extra-translations
        {{- end }}
      {{- end }}
      {{- if .Values.extrapages.create }}
      - name: extra-pages
        configMap:
          name: {{ .Values.name }}-extra-pages
      {{- end }}
      {{- if .Values.certs.create }}
      - name: certs
        configMap:
          name: {{ .Values.name }}-certs
      {{- end }}
      {{- if $keys }}
      - name: keys
        secret:
          secretName: {{ .Values.name }}-keys
      {{- end }}
      {{- if $db_tls }}
      - name: db-tls
        secret:
          secretName: {{ .Values.name }}-db-tls
      {{- end }}
      {{- if .Values.readOnlyFilesystem }}
      - name: tmp
        emptyDir: {}
      {{- end }}
